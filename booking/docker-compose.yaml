version: '3.1'

services:
  mongodb:
    image: mongo:latest
    container_name: booking-mongodb
    restart: always
    volumes:
      - ./scripts/rs-initiate.js:/docker-entrypoint-initdb.d/rs-initiate.js:rw,Z
    environment:
      MONGO_INITDB_DATABASE: booking
    ports:
      - 27017:27017
    networks:
      - mynetwork
    healthcheck:
      test: test $$(mongosh --quiet --eval "try {rs.initiate()} catch(e) {rs.status().ok}") -eq 1
      interval: 5s
    command: ['--replSet', 'rs0']
  room-app:
    build:
      context: ./node
      dockerfile: Dockerfile-room
    container_name: booking-room-app
    restart: always
    expose:
      - 3000
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
    networks:
      - mynetwork
  reservation-app:
    build:
      context: ./node
      dockerfile: Dockerfile-reservation
    container_name: booking-reservation-app
    restart: always
    expose:
      - 3000
    depends_on:
      - mongodb
      - room-app
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - ROOM_API_ENDPOINT=http://room-app:3000
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    container_name: booking-nginx
    restart: always
    user: $UID
    volumes:
      - ./load_balancer/nginx.conf:/etc/nginx/nginx.conf:rw,Z
    ports:
      - '8080:80'
    depends_on:
      - room-app
      - reservation-app
    networks:
      - mynetwork

  swagger-ui:
    image: swaggerapi/swagger-ui
    ports:
      - '8081:8080'
    environment:
      - API_URL=/swagger.yaml
    volumes:
      - ./swagger.yaml:/usr/share/nginx/html/swagger.yaml:rw,Z
    networks:
      - mynetwork

networks:
  mynetwork:
